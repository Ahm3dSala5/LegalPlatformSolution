// <auto-generated />
using System;
using LegalPlatform.Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LegalPlatform.Infrastructure.Migrations
{
    [DbContext(typeof(LegalPlatformContext))]
    [Migration("20250510170755_CreateRoles_Relationship")]
    partial class CreateRoles_Relationship
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LegalPlatform.Infrastructure.Domain.Entity.Business.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Appointment", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("cd7e56aa-80bb-41b1-bdf9-d3b9d2dcd83f"),
                            Date = new DateTime(2025, 5, 17, 17, 7, 52, 959, DateTimeKind.Utc).AddTicks(2826),
                            Note = "Consultation for legal advice.",
                            Status = 0,
                            UserId = new Guid("0a848e9d-590f-4510-9f71-874f4380eb59")
                        },
                        new
                        {
                            Id = new Guid("cebdc156-e9a3-4384-b8c8-ee1e80a426ca"),
                            Date = new DateTime(2025, 5, 13, 17, 7, 52, 959, DateTimeKind.Utc).AddTicks(2831),
                            Note = "Consultation for legal advice.",
                            Status = 2,
                            UserId = new Guid("a81b0008-d046-4696-a09f-c9812ae7760c")
                        });
                });

            modelBuilder.Entity("LegalPlatform.Infrastructure.Domain.Entity.Business.Articale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Articale", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a7acbc2d-4817-47f5-8f20-5cb8c716aea2"),
                            Content = "Content of legal insights article.",
                            Title = "Legal Insights",
                            UploadedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("0a848e9d-590f-4510-9f71-874f4380eb59")
                        },
                        new
                        {
                            Id = new Guid("3f551cd6-4e22-427a-b175-77e760c30716"),
                            Content = "Content of legal policies article.",
                            Title = "Understanding Legal Policies",
                            UploadedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("a81b0008-d046-4696-a09f-c9812ae7760c")
                        });
                });

            modelBuilder.Entity("LegalPlatform.Infrastructure.Domain.Entity.Business.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Client", (string)null);
                });

            modelBuilder.Entity("LegalPlatform.Infrastructure.Domain.Entity.Business.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ArticaleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ArticaleId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("785bd076-4cee-4bbc-a025-36ed9d524f58"),
                            AddedAt = new DateTime(2025, 5, 10, 17, 7, 52, 959, DateTimeKind.Utc).AddTicks(2741),
                            ArticaleId = new Guid("a7acbc2d-4817-47f5-8f20-5cb8c716aea2"),
                            Text = "Great article!",
                            UserId = new Guid("0a848e9d-590f-4510-9f71-874f4380eb59")
                        },
                        new
                        {
                            Id = new Guid("2d69fb0c-1d70-4b9d-9a7a-7285708f8fe9"),
                            AddedAt = new DateTime(2025, 5, 10, 17, 7, 52, 959, DateTimeKind.Utc).AddTicks(2786),
                            ArticaleId = new Guid("3f551cd6-4e22-427a-b175-77e760c30716"),
                            Text = "Very informative!",
                            UserId = new Guid("a81b0008-d046-4696-a09f-c9812ae7760c")
                        });
                });

            modelBuilder.Entity("LegalPlatform.Infrastructure.Domain.Entity.Business.Lawyer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LawFirm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficeAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Lawyer", (string)null);
                });

            modelBuilder.Entity("LegalPlatform.Infrastructure.Domain.Entity.Business.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Reciever")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Sender")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Payment", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8ad2b0a6-ec75-4f93-a573-8801d65dd52b"),
                            Amount = 250.00m,
                            PaymentDate = new DateTime(2025, 5, 10, 17, 7, 52, 959, DateTimeKind.Utc).AddTicks(2792),
                            Reciever = new Guid("a81b0008-d046-4696-a09f-c9812ae7760c"),
                            Sender = new Guid("0a848e9d-590f-4510-9f71-874f4380eb59"),
                            UserId = new Guid("0a848e9d-590f-4510-9f71-874f4380eb59")
                        },
                        new
                        {
                            Id = new Guid("ff1aca82-3035-49bd-bd78-8a6cee7771ea"),
                            Amount = 100.00m,
                            PaymentDate = new DateTime(2025, 5, 5, 17, 7, 52, 959, DateTimeKind.Utc).AddTicks(2809),
                            Reciever = new Guid("0a848e9d-590f-4510-9f71-874f4380eb59"),
                            Sender = new Guid("a81b0008-d046-4696-a09f-c9812ae7760c"),
                            UserId = new Guid("a81b0008-d046-4696-a09f-c9812ae7760c")
                        });
                });

            modelBuilder.Entity("LegalPlatform.Infrastructure.Domain.Entity.Security.LegalRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("LegalPlatform.Infrastructure.Domain.Entity.Security.LegalUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0a848e9d-590f-4510-9f71-874f4380eb59"),
                            AccessFailedCount = 0,
                            Address = "123 Main St, New York, NY",
                            Balance = 500.75m,
                            ConcurrencyStamp = "039bfc19-6543-4e4e-8d56-d3e3d93ec034",
                            Email = "john.doe@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN.DOE@EXAMPLE.COM",
                            NormalizedUserName = "JOHN_DOE",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UserName = "john_doe"
                        },
                        new
                        {
                            Id = new Guid("a81b0008-d046-4696-a09f-c9812ae7760c"),
                            AccessFailedCount = 0,
                            Address = "456 Elm St, Los Angeles, CA",
                            Balance = 1200.50m,
                            ConcurrencyStamp = "1cd87fed-895e-423c-b11d-369e16ce449f",
                            Email = "jane.smith@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JANE.SMITH@EXAMPLE.COM",
                            NormalizedUserName = "JANE_SMITH",
                            PhoneNumber = "0987654321",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UserName = "jane_smith"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LegalUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "Id");

                    b.HasIndex("LegalUserId");

                    b.ToTable("IdentityUserClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("LegalUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider");

                    b.HasIndex("LegalUserId");

                    b.ToTable("IdentityUserLogin", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LegalUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("LegalUserId");

                    b.HasIndex("RoleId");

                    b.ToTable("IdentityUserRole", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("LegalUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.HasIndex("LegalUserId");

                    b.ToTable("IdentityUserToken", (string)null);
                });

            modelBuilder.Entity("LegalPlatform.Infrastructure.Domain.Entity.Business.Appointment", b =>
                {
                    b.HasOne("LegalPlatform.Infrastructure.Domain.Entity.Security.LegalUser", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LegalPlatform.Infrastructure.Domain.Entity.Business.Articale", b =>
                {
                    b.HasOne("LegalPlatform.Infrastructure.Domain.Entity.Security.LegalUser", "User")
                        .WithMany("Articales")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LegalPlatform.Infrastructure.Domain.Entity.Business.Client", b =>
                {
                    b.HasOne("LegalPlatform.Infrastructure.Domain.Entity.Security.LegalUser", "User")
                        .WithOne("ClientProfile")
                        .HasForeignKey("LegalPlatform.Infrastructure.Domain.Entity.Business.Client", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LegalPlatform.Infrastructure.Domain.Entity.Business.Comment", b =>
                {
                    b.HasOne("LegalPlatform.Infrastructure.Domain.Entity.Business.Articale", "Articale")
                        .WithMany("Comments")
                        .HasForeignKey("ArticaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LegalPlatform.Infrastructure.Domain.Entity.Security.LegalUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Articale");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LegalPlatform.Infrastructure.Domain.Entity.Business.Lawyer", b =>
                {
                    b.HasOne("LegalPlatform.Infrastructure.Domain.Entity.Security.LegalUser", "User")
                        .WithOne("LawyerProfile")
                        .HasForeignKey("LegalPlatform.Infrastructure.Domain.Entity.Business.Lawyer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LegalPlatform.Infrastructure.Domain.Entity.Business.Payment", b =>
                {
                    b.HasOne("LegalPlatform.Infrastructure.Domain.Entity.Security.LegalUser", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("LegalPlatform.Infrastructure.Domain.Entity.Security.LegalRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("LegalPlatform.Infrastructure.Domain.Entity.Security.LegalUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("LegalUserId");

                    b.HasOne("LegalPlatform.Infrastructure.Domain.Entity.Security.LegalUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("LegalPlatform.Infrastructure.Domain.Entity.Security.LegalUser", null)
                        .WithMany("Logins")
                        .HasForeignKey("LegalUserId");

                    b.HasOne("LegalPlatform.Infrastructure.Domain.Entity.Security.LegalUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("LegalPlatform.Infrastructure.Domain.Entity.Security.LegalUser", null)
                        .WithMany("Roles")
                        .HasForeignKey("LegalUserId");

                    b.HasOne("LegalPlatform.Infrastructure.Domain.Entity.Security.LegalRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LegalPlatform.Infrastructure.Domain.Entity.Security.LegalUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("LegalPlatform.Infrastructure.Domain.Entity.Security.LegalUser", null)
                        .WithMany("Tokens")
                        .HasForeignKey("LegalUserId");

                    b.HasOne("LegalPlatform.Infrastructure.Domain.Entity.Security.LegalUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LegalPlatform.Infrastructure.Domain.Entity.Business.Articale", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("LegalPlatform.Infrastructure.Domain.Entity.Security.LegalUser", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Articales");

                    b.Navigation("Claims");

                    b.Navigation("ClientProfile");

                    b.Navigation("Comments");

                    b.Navigation("LawyerProfile");

                    b.Navigation("Logins");

                    b.Navigation("Payments");

                    b.Navigation("Roles");

                    b.Navigation("Tokens");
                });
#pragma warning restore 612, 618
        }
    }
}
